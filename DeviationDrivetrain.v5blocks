{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><comment id=\"!bnXRUlQ7-!n3R.w^!P`\" x=\"853\" y=\"149\" h=\"272\" w=\"609\">Deviaiton Test -- Version 2.0 02/01/2022 BCN\n\nAssumes LM on port# 10 and RM on port# 1\n\nButton A - drive forward\nButton Y - drive backward\n\nButton X is an Estop (emergency stop)</comment><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_motion_stop_driving\" id=\"_G*yfsLu+$AF0){;5fFS\"><next><block type=\"v5_looks_print\" id=\"tDjGokFa5Cux]0)F@6T7\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Dd;/U%h!Log$QC-*NT%a\"><field name=\"TEXT\">Program Started</field></shadow></value><next><block type=\"v5_looks_print\" id=\"IgFs^)-n(q{Y.tYG_Uq(\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"0A:CXI@F4o$9dH__eXX=\"><field name=\"TEXT\">Waiting to Start Test</field></shadow></value></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"n=N%#hRuLN_n,b:gx|Vb\" x=\"71\" y=\"410\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonX</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_motion_stop_driving\" id=\"ytLjT|p0~QX;SrQRhxs8\"><next><block type=\"v5_looks_print\" id=\"57B6iYn4!mF#u(T@`d3E\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"m3R_nAGnjYd4gTs)$t{h\"><field name=\"TEXT\">Program Aborted</field></shadow></value></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"}swg.M7cVAkM%#dd?ZCp\" x=\"70\" y=\"630\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonA</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_looks_print\" id=\"`2-Lly@osh$5O*4LLX*K\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"x-qu`ygS1-,nnQ-KlazF\"><field name=\"TEXT\">Forward Deviation Test Started</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"0+MzN`IOc|*jf;9?m3nO\"><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"2s$I7NNDrUkRgJ!Fsx[%\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"tRCE-(EdArsNcgO959R;\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"i*3~$krI}S29$SUM9WD|\"><field name=\"NUM\">5000</field></shadow></value><next><block type=\"v5_motion_stop_driving\" id=\"bK2c)B3^?,D-6*FZs.Q%\"><next><block type=\"v5_looks_print\" id=\"OHtfFa[x?c0?t+X.]3-_\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"1z[.Ueb1Z@z5MHypPk:X\"><field name=\"TEXT\">Deviation Test Finished</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"p/}W=1EEgqv9[ZJM=0kI\" x=\"890\" y=\"630\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonY</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_looks_print\" id=\"U0;qYY#btm1ZSVFTw4k?\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"(230fT0a${ZoiyYU=eN?\"><field name=\"TEXT\">Backward Deviation Test Started</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"PFsfT[X)?Sg.qH._brH?\"><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"N7JAP0x(mylX,KGL3$9W\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"l9*zVeWg1BRuKwyD{:Hn\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"Q66_VcI/q:=?vXfAI{^?\"><field name=\"NUM\">5000</field></shadow></value><next><block type=\"v5_motion_stop_driving\" id=\"DwW8w/oKs:dInQN*c=X7\"><next><block type=\"v5_looks_print\" id=\"}-lFGmov7)_,WH:tnnV?\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"NbZ|^I?XQWEPr(*w/|f!\"><field name=\"TEXT\">Deviation Test Finished</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[10,1,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"370","unit":"mm","wheelbase":"140","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT10, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT1, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 370, 140, mm, 1);\n\ncontroller Controller1 = controller(primary);\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.stop();\n  Brain.Screen.print(\"Program Started\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Waiting to Start Test\");\n  Brain.Screen.newLine();\n  return 0;\n}\n\n// \"when Controller1 ButtonX pressed\" hat block\nvoid onevent_Controller1ButtonX_pressed_0() {\n  Drivetrain.stop();\n  Brain.Screen.print(\"Program Aborted\");\n  Brain.Screen.newLine();\n}\n\n// \"when Controller1 ButtonA pressed\" hat block\nvoid onevent_Controller1ButtonA_pressed_0() {\n  Brain.Screen.print(\"Forward Deviation Test Started\");\n  Brain.Screen.newLine();\n  Drivetrain.setDriveVelocity(100.0, rpm);\n  Drivetrain.driveFor(forward, 5000.0, mm, true);\n  Drivetrain.stop();\n  Brain.Screen.print(\"Deviation Test Finished\");\n  Brain.Screen.newLine();\n}\n\n// \"when Controller1 ButtonY pressed\" hat block\nvoid onevent_Controller1ButtonY_pressed_0() {\n  Brain.Screen.print(\"Backward Deviation Test Started\");\n  Brain.Screen.newLine();\n  Drivetrain.setDriveVelocity(100.0, rpm);\n  Drivetrain.driveFor(reverse, 5000.0, mm, true);\n  Drivetrain.stop();\n  Brain.Screen.print(\"Deviation Test Finished\");\n  Brain.Screen.newLine();\n}\n\n\nint main() {\n  // register event handlers\n  Controller1.ButtonX.pressed(onevent_Controller1ButtonX_pressed_0);\n  Controller1.ButtonA.pressed(onevent_Controller1ButtonA_pressed_0);\n  Controller1.ButtonY.pressed(onevent_Controller1ButtonY_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}